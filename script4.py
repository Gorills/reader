import asyncio
import random
import logging
import time
from colorama import init, Fore, Style
from playwright.async_api import async_playwright
from playwright_stealth import stealth

init()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üìå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOOK_URL = "https://author.today/reader/89419"
CHAPTER_IDS = [704052, 705009, 707495, 707877, 708134, 709579]
CHAPTER_DISTRIBUTION = [50, 30, 10, 5, 3, 1]

# ‚è≥ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
MIN_READING_TIME = 240
MAX_READING_TIME = 360
MIN_SESSION_TIME = 360
MAX_SESSION_TIME = 2400
SESSION_DELAY = (5, 10)

async def bypass_cloudflare(page, url):
    """üîÑ –û–±—Ö–æ–¥ Cloudflare —á–µ—Ä–µ–∑ Playwright + Stealth"""
    try:
        logger.info(f"{Fore.CYAN}‚ñ∂Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}{Style.RESET_ALL}")
        await page.goto(url, wait_until="networkidle")
        await asyncio.sleep(random.uniform(2, 5))  # ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        return True
    except Exception as e:
        logger.error(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}{Style.RESET_ALL}")
        return False

async def read_chapter(page, chapter_url, remaining_time):
    """üìñ –ß–∏—Ç–∞–µ–º –≥–ª–∞–≤—É (—Å–∫—Ä–æ–ª–ª–∏–º, –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è)"""
    try:
        if not await bypass_cloudflare(page, chapter_url):
            return 0

        reading_time = min(random.uniform(MIN_READING_TIME, MAX_READING_TIME), remaining_time)
        scrolls = random.randint(10, 20)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–æ–ª–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é

        logger.info(f"{Fore.YELLOW}üìñ –ß–∏—Ç–∞–µ–º –≥–ª–∞–≤—É: {chapter_url}, –≤—Ä–µ–º—è: {reading_time:.1f} —Å–µ–∫{Style.RESET_ALL}")

        for _ in range(scrolls):
            await page.mouse.wheel(0, random.randint(300, 500))  # üìú –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
            await asyncio.sleep(random.uniform(1, 3))  # ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞

            if random.random() < 0.2:  # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                await asyncio.sleep(random.uniform(2, 5))

        await asyncio.sleep(max(0, reading_time - (scrolls * 2)))  # –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        logger.info(f"{Fore.GREEN}‚úÖ –ì–ª–∞–≤–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞: {chapter_url}{Style.RESET_ALL}")
        return reading_time
    except Exception as e:
        logger.error(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≥–ª–∞–≤—ã {chapter_url}: {e}{Style.RESET_ALL}")
        return 0

async def simulate_session(session_id):
    """üîÑ –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True, args=["--start-maximized"])  # –ó–∞–ø—É—Å–∫ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            context = await browser.new_context(viewport={"width": 1280, "height": 720})  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            page = await context.new_page()
            await stealth(page)  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è Stealth Mode

            session_time = random.uniform(MIN_SESSION_TIME, MAX_SESSION_TIME)
            remaining_time = session_time

            logger.info(f"{Fore.MAGENTA}üïµÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é {session_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session_time:.1f} —Å–µ–∫{Style.RESET_ALL}")

            chapter_urls = [f"{BOOK_URL}/{chapter_id}" for chapter_id in CHAPTER_IDS]
            weighted_chapters = random.choices(chapter_urls, weights=CHAPTER_DISTRIBUTION, k=len(chapter_urls))

            for chapter_url in weighted_chapters:
                if remaining_time <= 0:
                    break
                spent_time = await read_chapter(page, chapter_url, remaining_time)
                remaining_time -= spent_time

            logger.info(f"{Fore.BLUE}üìå –°–µ—Å—Å–∏—è {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time:.1f} —Å–µ–∫{Style.RESET_ALL}")

            await browser.close()
    except Exception as e:
        logger.error(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {e}{Style.RESET_ALL}")

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π"""
    tasks = [simulate_session(i) for i in range(1)]  # –ó–∞–ø—É—Å–∫ 1 —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å)
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
